import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
import numpy as np

# Define Nadaraya-Watson Envelope function
def nadaraya_watson_envelope(price_data, bandwidth=0.1):
    smoothed_values = []

    for i in range(len(price_data)):
        xi = price_data.iloc[i]['Close']
        weights = []

        for j in range(len(price_data)):
            xj = price_data.iloc[j]['Close']
            kernel_weight = np.exp(-(xi - xj) ** 2 / (2 * bandwidth ** 2))
            weights.append(kernel_weight)

        weighted_prices = price_data['Close'] * weights
        smoothed_value = weighted_prices.sum() / sum(weights)
        smoothed_values.append(smoothed_value)

    upper_envelope = np.array(smoothed_values) + bandwidth
    lower_envelope = np.array(smoothed_values) - bandwidth

    return upper_envelope, lower_envelope

# Generate signals
def generate_signals(price_data, bandwidth=0.1):
    upper_envelope, lower_envelope = nadaraya_watson_envelope(price_data, bandwidth)
    signals = []

    for i in range(len(price_data)):
        if price_data['Close'][i] > upper_envelope[i]:
            signals.append('SELL')
        elif price_data['Close'][i] < lower_envelope[i]:
            signals.append('BUY')
        else:
            signals.append('HOLD')

    return signals

# Load historical data
data = yf.download('GOOGL', start="2020-01-01", end="2022-04-30")

# Extract the closing prices
close_prices = data['Close']

# Set the bandwidth for Nadaraya-Watson Envelopes
bandwidth = 10.0  # Adjust this value as needed

# Calculate the Nadaraya-Watson Envelopes
upper_envelope, lower_envelope = nadaraya_watson_envelope(close_prices, bandwidth)

# Generate trading signals
signals = generate_signals(close_prices, bandwidth)

# Implement risk management and portfolio simulation
def simulate_portfolio(signals, initial_cash=100000):
    portfolio = pd.DataFrame(index=signals.index)
    portfolio['Signal'] = signals['BuySignal'] + signals['SellSignal']
    portfolio['Position'] = portfolio['Signal'].cumsum()
    portfolio['Cash'] = initial_cash - (portfolio['Signal'] * signals['Price']).cumsum()

    # Calculate portfolio value
    portfolio['PortfolioValue'] = portfolio['Cash'] + (portfolio['Position'] * signals['Price'])

    return portfolio

# Simulate the portfolio
portfolio = simulate_portfolio(signals)

# Plot the results
plt.figure(figsize=(12, 8))
plt.title('Nadaraya-Watson Envelopes Trading Strategy')
plt.plot(signals.index, close_prices, label='Close Price', lw=1)
plt.plot(signals.index, upper_envelope, 'g', label='Upper Envelope', lw=1)
plt.plot(signals.index, lower_envelope, 'r', label='Lower Envelope', lw=1)
plt.legend()

plt.figure(figsize=(12, 4))
plt.title('Portfolio Performance')
plt.plot(portfolio.index, portfolio['PortfolioValue'], label='Portfolio Value', lw=1)
plt.legend()
plt.show()



